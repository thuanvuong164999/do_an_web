tạo table chat chứa histories có:
id ,sent_by char(50), created_at char(100), message, room_ id char(250) ;

mặc định room_id là 2 (room common)

tạo table rooms chứa danh sách các room
id, name char(50), counter integer ;

counter lưu giá trị 0 (mặc định)

select chat.sent_by, chat.created_at, chat.message, rooms.sent_to from chat, rooms where chat.room_id = rooms.id ;

select * from chat limit <room_id> ;

công việc về nhà:
+) tạo frond_end:
chia chat_bg thanhf 2 cột, 1 cột room_list, 1 cột room_chat

tạo API cho từng room
    app.get('/api/room-list', (req, res) =>{ })

    lấy dữ liệu trong api
        cài module axios : npm install axios --save (trong file client)
        cài module cors : npm i cors --save (trong file client, để khắc phục lỗi)

socket.on() máy chủ gửi về socket
socket.emit() socket gửi cho máy chủ

=== : so sánh bằng giữa 2 giá trị có định dạng cùng loại
!== : so sánh khác giữa 2 giá trị có định dạng 'cùng loại'

this.state là nơi lưu tất cả các biến trong contructor(), mún thay đổi biến trong state thì phài sử dụng this.setState 

*** bảo vệ:
--> không bị lỗi
--> server ??? client ???
--> cách chạy ra client
--> mục tiêu của úng dụng
--> đã làm được gì trong từng Comp , có thể phát triển gì thêm
--> chạy thực gian
** Lưu ý
--> chuẫn bị, chạy thử, tập dợt trước 2h


io.on('connection', (socket) => {} ???
--> on : nhận tín hiệu
--> off : ngắt/đóng tín hiệu, sử dụng khi không mún tín hiệu hoạt động tiếp
--> emit : gửi tín hiệu

io.in(room).emit() ??? --> phương thức gửi tín hiệu lên room
--> gửi tín hiệu cho đối tượng room 

socket là link server ???
--> socket(io) là đối tượng thực hiện chức năng on/off/emit (đón/ngắt/gửi tín hiệu) 

return ???

